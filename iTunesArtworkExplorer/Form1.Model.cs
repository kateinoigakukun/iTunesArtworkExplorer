using System;using System.Collections.Generic;using System.Net;using System.IO;using System.Text;using Codeplex.Data;using System.Drawing;using System.Diagnostics;using iTunesLib;using System.Collections;using System.Windows.Forms;namespace iTunesArtworkExplorer{    partial class Form1Model    {        public string trackName;        public Dictionary<string, string> imageURLs = null;    }    class iTunesAPI    {        private string baseURL = "https://itunes.apple.com/search";        public dynamic getSearchResult(string term)        {//            Dictionary<string, string> param = new Dictionary<string, string>();//            param["term"] = term;//            param["country"] = "jp";                      string param = $"?term={term}&country=jp&media=music&limit=10";            string requestURL = baseURL + param;            using (WebClient wc = new WebClient())            {                wc.Encoding = System.Text.Encoding.UTF8;                try                {                    var json = wc.DownloadString(requestURL);                    var data = DynamicJson.Parse(json);                    return data;                }                catch (Exception ex)                {                    Debug.WriteLine(ex);                    return null;                }            }        }    }    class iTunesControllerAPI    {        static iTunesApp app = new iTunesLib.iTunesApp();        static public Image getArtwork()        {            IITTrack track = app.CurrentTrack;            if (track == null) return null;            string home = Environment.GetEnvironmentVariable("USERPROFILE").ToString();            string ArtworkPath = $"{home}\\iTunesArtworkExplore\\DefaultArtwork\\{track.Name}";            if (track.Artwork.Count < 1) return null;            foreach (IITArtwork artwork in track.Artwork)            {                if (artwork.Format == ITArtworkFormat.ITArtworkFormatJPEG)                    ArtworkPath = ArtworkPath + ".jpg";                else if (artwork.Format == ITArtworkFormat.ITArtworkFormatBMP)                    ArtworkPath = ArtworkPath + ".bmp";                else if (artwork.Format == ITArtworkFormat.ITArtworkFormatPNG)                    ArtworkPath = ArtworkPath + ".png";                else                {                    ArtworkPath = null;                    return null;                }                Debug.WriteLine(ArtworkPath);                System.IO.Directory.CreateDirectory($"{home}\\iTunesArtworkExplore\\DefaultArtwork");                artwork.SaveArtworkToFile(ArtworkPath);                break;            }            return Image.FromFile(ArtworkPath);        }        static public IITTrack getTrack()        {            IITTrack track = app.CurrentTrack;            return track;        }        static public void setTrack(Image img)        {            IITTrack track = app.CurrentTrack;            string home = Environment.GetEnvironmentVariable("USERPROFILE").ToString();            string ArtworkPath = $"{home}\\iTunesArtworkExplore\\HighResoArtwork\\{track.Name}.jpg";            if(img != null)            {                System.IO.Directory.CreateDirectory($"{home}\\iTunesArtworkExplore\\HighResoArtwork");                img.Save(ArtworkPath);            }            if(track.Artwork.Count < 1)            {                track.AddArtworkFromFile(ArtworkPath);                MessageBox.Show("アートワークがセットされました。",                    "成功",                    MessageBoxButtons.OK,                    MessageBoxIcon.None);            }            else            {                try                {                    foreach (IITArtwork artwork in track.Artwork)                    {                        artwork.SetArtworkFromFile(ArtworkPath);                    }                    MessageBox.Show("アートワークがセットされました。",            "成功",            MessageBoxButtons.OK,            MessageBoxIcon.None);                }                catch (Exception ex)                {                    MessageBox.Show(ex.ToString(),                        "エラー",                        MessageBoxButtons.OK,                        MessageBoxIcon.Error);                }            }                    }    }}